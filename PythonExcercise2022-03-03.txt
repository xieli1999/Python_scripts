import matplotlib.pyplot as plt
import openpyxl
import mplcursors

workbook=openpyxl.load_workbook('/Users/telus/dev/Python_scripts/PythonExcercise2022-03-03.xlsx', data_only = True)
sheet=workbook['Sheet 1']


startNodes_cell = sheet['B2': 'B6']
endNodes_cell = sheet['C2': 'C6']
flow_cell = sheet['D2':'D6']
names_cell = sheet['E2':'E6']
startNodes = []
endNodes = []
names = []
for i in range(5):
    startNodes.append(startNodes_cell[i][0].internal_value)
    endNodes.append(endNodes_cell[i][0].internal_value)
    names.append(names_cell[i][0].internal_value + ' flow: ' + str(flow_cell[i][0].internal_value))


fig, ax = plt.subplots()
lines = []
levelY = 5
for i in range(len(names)):
    gap = endNodes[i] - startNodes[i]
    if(gap ==1):
        y = [levelY,levelY]
        x = [startNodes[i],endNodes[i]]
        l, = ax.plot(x, y, label=names[i],color='r')
        lines.append(l)
    else:
        y = [levelY,levelY-1,levelY-1,levelY]
        x = [startNodes[i],startNodes[i],endNodes[i],endNodes[i]]
        l, = ax.plot(x, y, label=names[i],color='r')
        lines.append(l)
    
    #The purpose of using ax.text instead of ax.annotate is that the 3rd circle will not be able to cover the 3rd line.
    ax.text(startNodes[i], levelY, str(round(startNodes[i])), ha="center", va="center", size=10,bbox=dict(boxstyle="circle,pad=0.3", fc="w", ec="r", fill='true', lw=2))
    ax.text(endNodes[i], levelY, str(round(endNodes[i])), ha="center", va="center", size=10,bbox=dict(boxstyle="circle,pad=0.3", fc="w", ec="r", fill='true', lw=2))

  
ax.set_xlim(0,6)
ax.set_ylim(0,10)
    
mplcursors.cursor(hover=mplcursors.HoverMode.Transient).connect(
    "add", lambda sel: sel.annotation.set_text(sel.artist.get_label()))

plt.show()
